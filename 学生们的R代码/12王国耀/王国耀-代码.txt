
##All required packages：ggplot2、cowplot、dplyr

#小提琴图

#package：ggplot2

#何为小提琴图？

#此图结合了箱形图（Boxplot）与密度图（Density plot）的一些特征，形似小提琴。

#数据

summary(airquality)

#用变量Month和Temp，作一个小提琴图

#作一个简单版本的小提琴图

newdata=data.frame(Score=airquality$Temp, School=airquality$Month)

summary(newdata)


ggplot(newdata, aes(factor(School), Score)) +

geom_violin(width = 0.5)

#geom_violin( )告诉R作一个小提琴图;#第三行中的width = 0.5 可以让小提琴变得瘦一点。

#横置小提琴

ggplot(newdata, aes(factor(School), Score)) +

geom_violin(width = 0.5) +

coord_flip()

#coord_flip( )更改了图形的坐标系统，即x轴与y轴对换。此代码属于ggplot2的一个要素：坐标系统。

#改变带宽值

ggplot(newdata, aes(factor(School), Score)) +

geom_violin(width = 0.5, adjust = 0.5)

#改变颜色

ggplot(newdata, aes(factor(School), Score)) +

geom_violin(width = 0.5, adjust = 0.5,

aes(fill = factor(School))) +

theme_classic() +

theme(legend.position = "none")

#第四行将不同月份(Month)相应填上不同的颜色;第五行更改了图片的主题为：theme_classic()。

#修改坐标轴的题目

ggplot(newdata, aes(factor(School), Score)) +

geom_violin(width = 0.5, adjust = 0.5,

aes(fill = factor(School))) +

theme_classic() +

theme(legend.position = "none") +

scale_x_discrete("School") +

scale_y_continuous("Test Score")

#因为x轴是一个分类变量，因此第7行中的代码是“discrete”, y轴是连续变量，所以是“continuous”。

#添加中位数

ggplot(newdata, aes(factor(School), Score)) +

geom_violin(width = 0.5, adjust = 0.5,

aes(fill = factor(School))) +

theme_classic() +

theme(legend.position = "none") +

scale_x_discrete("School") +

scale_y_continuous("Test Score") +

stat_summary(fun = median, geom = "point", size = 3)


#云雨图

雨云图（Rain cloud plot）

package：ggplot2、cowplot、dplyr

#数据：iris

# 载入所需R包

library(ggplot2)

library(cowplot)

library(dplyr)

 
 # 制作云雨图的关键代码来自：https://gist.github.com/dgrtwo/eb7750e74997891d7c20
 
 # 选中下方所有代码后，直接运行
 
 "%||%" <- function(a, b) {
 
 if (!is.null(a)) a else b
 
 }
 
 geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
 
 position = "dodge", trim = TRUE, scale = "area",
 
 show.legend = NA, inherit.aes = TRUE, ...) {
 
 layer(
 
 data = data,
 
 mapping = mapping,
 
 stat = stat,
 
 geom = GeomFlatViolin,
 
 position = position,
 
 show.legend = show.legend,
 
 inherit.aes = inherit.aes,
 
 params = list(
 
 trim = trim,
 
 scale = scale,
 
 ...
 
 )
 
 )
 
 }
 
 #' @rdname ggplot2-ggproto
 
 #' @format NULL
 
 #' @usage NULL
 
 #' @export
 
 GeomFlatViolin <-
 
 ggproto("GeomFlatViolin", Geom,
 
 setup_data = function(data, params) {
 
 data$width <- data$width %||%
 
 params$width %||% (resolution(data$x, FALSE) * 0.9)
 
  
 
 # ymin, ymax, xmin, and xmax define the bounding rectangle for each group
 
 data %>%
 
 group_by(group) %>%
 
 mutate(ymin = min(y),
 
 ymax = max(y),
 
 xmin = x,
 
 xmax = x + width / 2)
 
 },
 
  
 
 draw_group = function(data, panel_scales, coord) {
 
 # Find the points for the line to go all the way around
 
 data <- transform(data, xminv = x,
 
 xmaxv = x + violinwidth * (xmax - x))
 
  
 
 # Make sure it's sorted properly to draw the outline
 
 newdata <- rbind(plyr::arrange(transform(data, x = xminv), y),
 
 plyr::arrange(transform(data, x = xmaxv), -y))
 
  
 
 # Close the polygon: set first and last point the same
 
 # Needed for coord_polar and such
 
 newdata <- rbind(newdata, newdata[1,])
 
  
 
 ggplot2:::ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
 
 },
 
  
 
 default_aes = aes(weight = 1, colour = "grey20", fill = "white", size = 0.5,
 
 alpha = NA, linetype = "solid"),
 
  
 
 draw_key = draw_key_polygon,
 
  
 
 required_aes = c("x", "y")
 
 )
 
 #上方那一段很长的代码的目的就是创建一个函数：geom_flat_violoin()。
 
 #有了geom_flat_violoin()之后，就可以制作雨云图了。
 
 
 ## Change a column name
 ### Rename the levels of a factor, and rename the variable name

 data(iris)
 colnames(iris)[colnames(iris)== "Species"]="District"
 colnames(iris)[colnames(iris)== "Sepal.Length"]= "Score"
 
 levels(iris$District) <- c('A', 'B', 'C')
 head(iris)

 
 ### 通过 District (分类变量）和 Score (连续变量）制作云雨图，
 
 # 初步的雨云图
 
 ggplot(iris, aes(District, Score)) +
 
 geom_flat_violin(position = position_nudge(x = 0.2, y = 0), adjust = 2) +
 
 geom_point(position = position_jitter(width = 0.15), size = 0.7) +
 
 theme_cowplot()
 
 #第三行：geom_flat_violin()可以制作“云”，其实就是半个小提琴图
 
 #第四行：geom_point()可以制作“雨”（散点图）。
 
 # 横置雨云图。
 
 ggplot(iris, aes(District, Score)) +
 
 geom_flat_violin(position = position_nudge(x = 0.2, y = 0), adjust = 2) +
 
 geom_point(position = position_jitter(width = 0.15), size = 0.7) +
 
 theme_cowplot() +
 
 coord_flip()
 
 #第六行：coord_filp()可以将x轴与y轴对调，从而让云覆盖在雨的上方
 
 # 修饰云雨的颜色
 
 ggplot(iris, aes(District, Score, fill = District, colour = District)) +
 
 geom_flat_violin(position = position_nudge(x = 0.2, y = 0), adjust = 2) +
 
 geom_point(position = position_jitter(width = 0.15), size = 0.7) +
 
 theme_cowplot() +
 
 theme(legend.position = "none") +
 
 coord_flip() +
 
 scale_colour_brewer(palette = "Set1")+ # 改变雨的颜色
 
 scale_fill_brewer(palette = "Set1") # 改变云的颜色
 
 # 修改为蓝色的云雨
 
 ggplot(iris, aes(District, Score, fill = District, colour = District)) +
 
 geom_flat_violin(position = position_nudge(x = 0.2, y = 0), adjust = 2) +
 
 geom_point(position = position_jitter(width = 0.15), size = 0.7) +
 
 theme_cowplot() +
 
 theme(legend.position = "none") +
 
 coord_flip() +
 
 scale_colour_brewer(palette = "Blues")+ # 改变雨的颜色
 
 scale_fill_brewer(palette = "Blues") # 改变云的颜色
 
 
 
 # 灰色
 
 ggplot(iris, aes(District, Score, fill = District, colour = District)) +
 
 geom_flat_violin(position = position_nudge(x = 0.2, y = 0), adjust = 2) +
 
 geom_point(position = position_jitter(width = 0.15), size = 0.7) +
 
 theme_cowplot() +
 
 theme(legend.position = "none") +
 
 coord_flip() +

scale_colour_brewer(palette = "Greys")+ # 改变雨的颜色

scale_fill_brewer(palette = "Greys") # 改变云的颜色


